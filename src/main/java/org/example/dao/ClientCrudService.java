package org.example.dao;


import org.example.entities.Client;
import org.example.hibernate.HibernateUtils;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.util.List;

/**
 * Client DAO (data access object)
 */
public class ClientCrudService {
    private static final String GET_ALL_CLIENT_QUERY = "from Client";

    /**
     * Creates new client in DB
     */
    public Long createClient(Client client) {

        try (Session session
                     = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            try {
                //Id is autogenerated
                client.setId(null);
                session.persist(client);
                transaction.commit();
                return client.getId();
            } catch (Exception e) {
                transaction.rollback();
                System.out.println("Cannot create client. Reason: " + e.getMessage());
                return null;
            }
        }
    }

    /**
     * Gets client with defined id from DB
     */
    public Client getClientById(Long id) {
        try (Session session
                     = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            return session.get(Client.class, id);
        }
    }

    /**
     * Gets all clients from DB
     */
    public List<Client> getAllClients() {
        try (Session session = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            return session.createQuery(GET_ALL_CLIENT_QUERY, Client.class).list();
        }
    }

    /**
     * Updates client in DB
     */
    public Client updateClient(Client client) {
        try (Session session
                     = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            try {
                session.merge(client);
                transaction.commit();
                return client;
            } catch (Exception e) {
                transaction.rollback();
                System.out.println("Cannot update client. Reason: " + e.getMessage());
                return null;
            }
        }
    }

    /**
     * Deletes client with defined id from DB
     */
    public boolean deleteClientById(Long id) {
        try (Session session
                     = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            try {
                Client client = session.get(Client.class, id);
                session.remove(client);
                transaction.commit();
                return true;
            } catch (Exception e) {
                transaction.rollback();
                System.out.println("Cannot delete client. Reason: " + e.getMessage());
                return false;
            }
        }

    }

    /**
     * Deletes client from DB
     */
    public boolean deleteClient(Client client) {
        try (Session session
                     = HibernateUtils.getInstance().getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            try {
                session.remove(client);
                transaction.commit();
                return true;
            } catch (Exception e) {
                transaction.rollback();
                System.out.println("Cannot delete client. Reason: " + e.getMessage());
                return false;
            }
        }
    }
}
